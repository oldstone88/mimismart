/*
{
  desc:"Hisense B544(E)",
  tag:"import-script",
  target:"RS485",
  selectArea:true,
  addItems:[
        {tag:"item", id:"%TARGET%", name:"NAME1", "sub-id":"%SUBID01%", "type":"conditioner", "t-min":"16", "t-delta":"14", "vane-ver":"0x41", "vane-hor":"0x00", "funs":"0x0F", "modes":"0x1F"},
        {tag:"item", id:"%TARGET%", name:"NAME2", "sub-id":"%SUBID02%", "type":"conditioner", "t-min":"16", "t-delta":"14", "vane-ver":"0x41", "vane-hor":"0x00", "funs":"0x0F", "modes":"0x1F"},
        {tag:"item", id:"%TARGET%", name:"NAME3", "sub-id":"%SUBID03%", "type":"conditioner", "t-min":"16", "t-delta":"14", "vane-ver":"0x41", "vane-hor":"0x00", "funs":"0x0F", "modes":"0x1F"},
        {tag:"item", id:"%TARGET%", name:"NAME4", "sub-id":"%SUBID04%", "type":"conditioner", "t-min":"16", "t-delta":"14", "vane-ver":"0x41", "vane-hor":"0x00", "funs":"0x0F", "modes":"0x1F"},
  ],
  vars:[
        {name:"RS485",type:"devices-list",required:true,filter:["com-port"],desc:"RS485"},
        {name:"NAME1",type:"string",required:true,min:3,max:40,desc:"Имя кондиционера",defaultValue:"Кондиционер 1"},
        {name:"NAME2",type:"string",required:false,min:3,max:40,desc:"Имя кондиционера",defaultValue:"Кондиционер 2"},
        {name:"NAME3",type:"string",required:false,min:3,max:40,desc:"Имя кондиционера",defaultValue:"Кондиционер 3"},
        {name:"NAME4",type:"string",required:false,min:3,max:40,desc:"Имя кондиционера",defaultValue:"Кондиционер 4"},
        {name:"Cond01",type:"hidden",value:"%TARGET%:%SUBID01%"},
        {name:"Cond02",type:"hidden",value:"%TARGET%:%SUBID02%"},
        {name:"Cond03",type:"hidden",value:"%TARGET%:%SUBID03%"},
        {name:"Cond04",type:"hidden",value:"%TARGET%:%SUBID04%"},
        {name:"Address1",type:"number",min:"1",max:"127",required:true,defaultValue:"1",desc:"Адрес Modbus"},
        {name:"Address2",type:"number",min:"1",max:"127",required:false,defaultValue:"2",desc:"Адрес Modbus"},
        {name:"Address3",type:"number",min:"1",max:"127",required:false,defaultValue:"3",desc:"Адрес Modbus"},
        {name:"Address4",type:"number",min:"1",max:"127",required:false,defaultValue:"4",desc:"Адрес Modbus"},

  ]
}
*/

u8 write = 0;
u8 cond[5]={0, 0, 0, 0, 0};
u8 state[5] = {0, 0, 0, 0, 0};
u8 writehold[8]={0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x16};
u8 writecoil[8]={0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x16};
u8 readhold[8]={0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0xCC, 0x16};
u8 readcoil[8]={0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xCC, 0x16};
u8 count=0;

const u16 ID [] = {
    ADDR2ID(Cond01)
    #ifdef Cond02, ADDR2ID(Cond02) #else ,0 #endif
    #ifdef Cond03, ADDR2ID(Cond03) #else ,0 #endif
    #ifdef Cond04, ADDR2ID(Cond04) #else ,0 #endif
};
const u8 SID [] = {
    ADDR2SID(Cond01)
    #ifdef Cond02, ADDR2SID(Cond02) #else ,0 #endif
    #ifdef Cond03, ADDR2SID(Cond03) #else ,0 #endif
    #ifdef Cond04, ADDR2SID(Cond04) #else ,0 #endif
};

const u8 Addr [] = {
    Address1
    #ifdef Address2, Address2 #else ,0#endif
    #ifdef Address3, Address3 #else ,0#endif
    #ifdef Address4, Address4 #else ,0#endif
};


//------------------------------------------

void setmode (u8 rezhim){
    if (rezhim==0) {rezhim=0; return rezhim;} //Обдув
    if (rezhim==1) {rezhim=2; return rezhim;} //Охлаждение
    if (rezhim==2) {rezhim=3; return rezhim;} //Сушка
    if (rezhim==3) {rezhim=1; return rezhim;} //Обогрев
    if (rezhim==4) {rezhim=4; return rezhim;} //Авто
}

void backmode (u8 rezhim){
    if (rezhim==0) {rezhim=0; return rezhim;} //Обдув
    if (rezhim==2) {rezhim=1; return rezhim;} //Охлаждение
    if (rezhim==3) {rezhim=2; return rezhim;} //Сушка
    if (rezhim==1) {rezhim=3; return rezhim;} //Обогрев
    if (rezhim==5) {rezhim=4; return rezhim;} //Авто
}

u8 NeedSend = 0; // Какой кондей
u8 NumSend = 0; // Что отправляем
u8 numRead = 0; // Что читаем

// Маркер чтения-записи
void stopwrite(){
    write=0;
}

void send(){
    cancelDelayedCall(send);
    u8 breakpoint=0;
    if(NeedSend){
        if(NumSend == 0) NumSend = 5;
        for(u8 i=0; (i<4) && (breakpoint==0); ++i){
            if( (NeedSend>>i)&1 ){
            	//srvError("Сейчас уставка кондиуионеру %d", i);
                breakpoint=1;
                if(!i) getStatus(Cond01, state);
                else if(i==1) getStatus(Cond02, state);
                else if(i==2) getStatus(Cond03, state);
                else if(i==3) getStatus(Cond04, state);
                // Назначаем адрес шлюза
                writehold[0]=Addr[i];
                // Вкл - выкл
                if(NumSend == 5){
                	//srvError("Пробуем ВКЛ - ВЫКЛ");
                    writecoil[0]=Addr[i];
                    if(state[0]%2==1) writecoil[4]=0xFF;
                    else writecoil[4]=0x00;
                    --NumSend;
                    setStatus(RS485, &writecoil);
                }
                // Температура
                else if(NumSend == 4){
                	//srvError("Пробуем температуру");
                    writehold[3] = 0x00;
                    writehold[5] = state[1]+16;
                    --NumSend;
                    setStatus(RS485, &writehold);
                }
                // Режим
                else if(NumSend == 3){
                    writehold[3] = 0x02;
                    writehold[5] = setmode(state[0]>>4);
                    --NumSend;
                    setStatus(RS485, &writehold);
                }
                // Скорость
                else if(NumSend == 2){
                    writehold[3] = 0x03;
                    writehold[5] = state[4];
                    if(writehold[5] == 1) writehold[5] = 2;
                    else if(writehold[5] == 2) writehold[5] = 3;
                    else if(writehold[5] == 3) writehold[5] = 1;
                    --NumSend;
                    setStatus(RS485, &writehold);
                }
                // Ламели
                else if(NumSend == 1){
                    writehold[3] = 0x04;
                    writehold[5] = state[3];
                    if(writehold[5] != 0) writehold[5] = 1;
                    --NumSend;
                    setStatus(RS485, &writehold);
                }

                if(NumSend == 0) {
                    NeedSend -= 1<<i;
                }
                if(NeedSend) delayedCallMs(send, 250);
                else stopwrite();

            }
        }
    }
}

void readStatus(){
    if(numRead == 0) numRead = 5;
        // ВКЛ - ВЫКЛ
        if(numRead == 5){
        	//srvError("Считываем ВКЛ-ВЫКЛ");
            --numRead;
            setStatus(RS485, &readcoil);
        }
        else if(numRead == 4){
            --numRead;
            readhold[3] = 0x02;
            setStatus(RS485, &readhold);
        }
        else if(numRead == 3){
            --numRead;
            readhold[3] = 0x07;
            setStatus(RS485, &readhold);
        }
        else if(numRead == 2){
            --numRead;
            readhold[3] = 0x08;
            setStatus(RS485, &readhold);
        }
        else if(numRead == 1){
            --numRead;
            readhold[3] = 0x09;
            setStatus(RS485, &readhold);
        }
        if(numRead && write == 0) delayedCallMs(readStatus, 250);
}

V-ID/Cond01, Cond02, Cond03, Cond04{
    if(senderId()!=exciterId()){
        for(u8 i=0;i<4;++i){
          if(SID[i]==senderSubId()){
            write=1;
            NeedSend|=1<<i;
            NumSend=5;
            cancelDelayedCall(readStatus);
            cancelDelayedCall(send);
            delayedCall(send, 1);
          }
        }
    }
}

void stat(){
u8 res[100]="";
        u8 *st = opt;
        u8 i = 0;
        sprintf(res,"%d ",optl);
        for(i = 0; i < optl; ++i){
            sprintf(res+strlen(res), " %x", st[i]);
        }
        sprintf(res+strlen(res), "\10");
        srvError(&res);
}

// Секция обратной связи
V-ID/s:5{
    if(write==0){
        count = count<3?++count:0;
        readhold[0] = Addr[count];
        readcoil[0] = Addr[count];
        readStatus();
    }
}

u8 mode = 0;

V-ID/RS485{
    #ifdef DEBUG stat(); #endif
    if(optl == 6 && opt(1) == 0x02){
        if(opt(0)==Address1){getStatus(Cond01, &cond); cond[0]|=opt(3); setStatus(Cond01, &cond);}
        else if(opt(0)==Address2){getStatus(Cond02, &cond); cond[0]|=opt(3); setStatus(Cond02, &cond);}
        else if(opt(0)==Address3){getStatus(Cond03, &cond); cond[0]|=opt(3); setStatus(Cond03, &cond);}
        else if(opt(0)==Address4){getStatus(Cond04, &cond); cond[0]|=opt(3); setStatus(Cond04, &cond);}
    }
    else if(optl == 7 && opt(1) == 0x04){
        if(count == 0) getStatus(Cond01, cond);
        else if(count == 1) getStatus(Cond02, cond);
        else if(count == 2) getStatus(Cond03, cond);
        else if(count == 3) getStatus(Cond04, cond);
        if(numRead == 3) {if(opt(4)>=16) cond[1] = opt(4) - 16;}
        else if(numRead == 2) {mode = backmode(opt(4)); cond[0] &= 1; cond[0] = (mode<<4)|cond[0];}
        else if(numRead == 1) {if(opt(4) == 0) cond[4] = 0; else if(opt(4) == 1) cond[4] = 3; else if(opt(4) == 2) cond[4] = 1; else if(opt(4) == 3) cond[4] = 2;}
        else if(numRead == 0) {cond[3] = opt(4)==1?16:0;}
        setStatus(@ID[count]:@SID[count], &cond);
    }
}
